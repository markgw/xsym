Nearest neighbours
~~~~~~~~~~~~~~~~~~

.. py:module:: langsim.modules.embedding_map.neighbours

+------------+------------------------------------------+
| Path       | langsim.modules.embedding_map.neighbours |
+------------+------------------------------------------+
| Executable | yes                                      |
+------------+------------------------------------------+

Implements the nearest neighbour techniques used in the Conneau paper.


Inputs
======

+-----------------------+---------------------------------------------------------------+
| Name                  | Type(s)                                                       |
+=======================+===============================================================+
| target_vectors        | :class:`Embeddings <pimlico.datatypes.embeddings.Embeddings>` |
+-----------------------+---------------------------------------------------------------+
| mapped_source_vectors | :class:`Embeddings <pimlico.datatypes.embeddings.Embeddings>` |
+-----------------------+---------------------------------------------------------------+

Outputs
=======

+--------+--------------------------------------------+
| Name   | Type(s)                                    |
+========+============================================+
| output | :func:`~pimlico.datatypes.files.NamedFile` |
+--------+--------------------------------------------+

Options
=======

+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+
| Name            | Description                                                                                                                                                         | Type                            |
+=================+=====================================================================================================================================================================+=================================+
| query_words     | Number of most frequent words to draw from source language as queries. This is 1.5k in the experiments in the paper. Default: 1.5k                                  | int                             |
+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+
| k               | Number of nearest neighbours to use for the CSLS terms that decrease the scores of items indense neighbourhoods                                                     | int                             |
+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+
| language_ids    | Comma-separated list of IDs used for the two languages                                                                                                              | comma-separated list of strings |
+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+
| candidate_words | Number of most frequent words from target language to consider as possible translations of the queries. This is 200k in the experiments in the paper. Default: 200k | int                             |
+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+
| min_freq        | Minimum word frequency to require for candidates to be eligible (even if they're in the top candidate_words. Default: 5 (as in paper)                               | int                             |
+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------+

